{
  "openapi": "3.0.0",
  "paths": {
    "/v1/auth/api/generate": {
      "post": {
        "operationId": "AuthApiController_createCredentials",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Create Api key and secret for authenticated user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiCredentials"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth API"
        ]
      }
    },
    "/v1/auth/api/credentials": {
      "get": {
        "operationId": "AuthApiController_getCredentials",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Signs in api user. If user's email is not verified an unauthorized error will be thrown. "
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when user's api key or secret is not exist for user ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User api key not exist."
                    },
                    "error": {
                      "type": "string",
                      "example": "USER_API_CREDENTIALS_NOT_EXIST"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth API"
        ]
      }
    },
    "/v1/auth/api/authorize": {
      "post": {
        "operationId": "AuthApiController_loginApiUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginApiUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Signs in api user and put tokens to response cookie and return user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when user's api key or secret is invalid ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid api key or secret."
                    },
                    "error": {
                      "type": "string",
                      "example": "ERROR_API_KEY_OR_SECRET"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth API"
        ]
      }
    },
    "/v1/auth/api/logout": {
      "post": {
        "operationId": "AuthApiController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Auth API"
        ]
      }
    },
    "/v1/post/feed/list": {
      "get": {
        "operationId": "PostController_getPostFeed",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userName",
            "required": false,
            "in": "query",
            "description": "Get post created by a particular user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postType",
            "required": false,
            "in": "query",
            "description": "The post type to return. By default it returns all posts.",
            "schema": {
              "enum": [
                "meeting",
                "video"
              ],
              "type": "string"
            }
          },
          {
            "name": "public",
            "required": false,
            "in": "query",
            "description": "Filter by posts that are public.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "streaming",
            "required": false,
            "in": "query",
            "description": "Filter by posts that are currently streaming.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "following",
            "required": false,
            "in": "query",
            "description": "Get only following posts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "tags",
            "required": false,
            "in": "query",
            "example": "education, programming, music",
            "description": "Search post by tag. Use comma separated for multiple values",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTerm",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "folderId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort post by time or popularity. If not specified, defaults to time",
            "schema": {
              "default": "popularity",
              "enum": [
                "time",
                "popularity"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "required": false,
            "in": "query",
            "description": "Sort direction of post. If not specified, defaults to DESC",
            "schema": {
              "default": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Gets post feed list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicPostFeedListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when requested fields are invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "List posts with requested payload is invalid."
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_VALID"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post"
        ]
      }
    },
    "/v1/post/feed/detail/{postId}": {
      "get": {
        "operationId": "PostController_getFeedById",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User gets post by requested id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasePostFeedList"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post"
        ]
      }
    },
    "/v1/post/update/{postId}": {
      "put": {
        "operationId": "PostController_editPostById",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPostDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Post update successfully completed with given parameters."
          },
          "400": {
            "description": "Error thrown when updated field are empty.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Edit Payload empty"
                    },
                    "error": {
                      "type": "string",
                      "example": "EDIT_POST_PAYLOAD_EMPTY"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post"
        ]
      }
    },
    "/v1/post/remove/{postId}": {
      "delete": {
        "operationId": "PostController_removePostById",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Requested post deleted successfully"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post"
        ]
      }
    },
    "/v1/post/video/view/{slug}/{fileName}": {
      "get": {
        "operationId": "PostController_viewVideoPost",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "View video with given post slug and filename."
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post video is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Video not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "VIDEO_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post"
        ]
      }
    },
    "/v1/post/video/stats/views": {
      "post": {
        "operationId": "PostController_videoViewStats",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoViewStats"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change video view stats according to requested parameters."
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post"
        ]
      }
    },
    "/v1/post/remove/video/{postId}/{videoName}": {
      "delete": {
        "operationId": "PostController_removePostVideo",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "videoName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Requested post video removed successfully."
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post"
        ]
      }
    },
    "/v1/post/featured/user/{userId}": {
      "get": {
        "operationId": "PostController_getFeaturedPost",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Returns authenticated user featured posts."
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post"
        ]
      }
    },
    "/v1/post/comment/create": {
      "post": {
        "operationId": "PostCommentController_createComment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostCommentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User creates a new comment for given postId. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCommentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when the post is not allow to comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "This post doesn't allow comments"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_COMMENTS_NOT_ALLOWED"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Comment"
        ]
      }
    },
    "/v1/post/comment/list/{postId}/{parentId}": {
      "get": {
        "operationId": "PostCommentController_listComments",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentId",
            "required": false,
            "in": "path",
            "allowEmptyValue": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User gets the comments belonging to the postId. If parentId param is specified, retrieves the replies for that comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCommentListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Comment"
        ]
      }
    },
    "/v1/post/comment/update": {
      "put": {
        "operationId": "PostCommentController_updateComment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostCommentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updates a specific post comment"
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Comment"
        ]
      }
    },
    "/v1/post/comment/remove/{commentId}": {
      "delete": {
        "operationId": "PostCommentController_removeComment",
        "parameters": [
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "User deletes a comment successfully."
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Comment"
        ]
      }
    },
    "/v1/post/comment/count/{postId}/{parentId}": {
      "get": {
        "operationId": "PostCommentController_getCommentCount",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "parentId",
            "required": false,
            "in": "path",
            "allowEmptyValue": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the number of comments belonging to the postId. If parentId is specified, it returns the number of replies for that comment."
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Comment"
        ]
      }
    },
    "/v1/post/comment/like/create": {
      "post": {
        "operationId": "PostCommentController_createCommentLike",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostCommentLikeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User likes a post comment.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "int",
                  "example": 1
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Comment"
        ]
      }
    },
    "/v1/post/comment/like/list/{postId}/{commentId}": {
      "get": {
        "operationId": "PostCommentController_getCommentLikes",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User gets the likes belonging to the postId and commentId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLikeListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Comment"
        ]
      }
    },
    "/v1/post/comment/like/remove/{commentId}": {
      "delete": {
        "operationId": "PostCommentController_removeCommentLike",
        "parameters": [
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "User unlikes a post comment. Returns Created when some rows are affected and OK otherwise"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Comment"
        ]
      }
    },
    "/v1/post/folder/list": {
      "get": {
        "operationId": "PostFolderController_getUserFolderList",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User gets folders which created for listing saved posts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PostFolderResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Folder"
        ]
      }
    },
    "/v1/post/folder/create": {
      "post": {
        "operationId": "PostFolderController_createPostFolder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostFolderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create new folder and return created folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostFolderResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Folder"
        ]
      }
    },
    "/v1/post/folder/update": {
      "put": {
        "operationId": "PostFolderController_updatePostFolder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePostFolderDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Post folder updated successfully."
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Folder"
        ]
      }
    },
    "/v1/post/folder/remove/{folderId}": {
      "delete": {
        "operationId": "PostFolderController_removePostFolder",
        "parameters": [
          {
            "name": "folderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Specified post folder deleted"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post folder is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post folder not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_FOLDER_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Folder"
        ]
      }
    },
    "/v1/post/folder/item/create": {
      "post": {
        "operationId": "PostFolderController_addFolderItem",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrRemovePostFolderItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add requested post to folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostFolderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when the post is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post folder is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post folder not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_FOLDER_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Folder"
        ]
      }
    },
    "/v1/post/folder/item/remove": {
      "post": {
        "operationId": "PostFolderController_removeFolderItem",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOrRemovePostFolderItemDto"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Specified post folder item deleted"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post folder item is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post folder item not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_FOLDER_ITEM_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Folder"
        ]
      }
    },
    "/v1/post/like/create": {
      "post": {
        "operationId": "PostLikeController_createPostLike",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostLikeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User likes a post."
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when the post is not allowed for reaction",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "This post doesn't allow reactions"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_REACTION_NOT_ALLOWED"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Like"
        ]
      }
    },
    "/v1/post/like/list/{postId}": {
      "get": {
        "operationId": "PostLikeController_getPostLikes",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Get either post's likes or dislikes, default is likes",
            "schema": {
              "enum": [
                "likes",
                "dislikes"
              ],
              "type": "string"
            }
          },
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User gets the likes belonging to the postId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLikeListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Like"
        ]
      }
    },
    "/v1/post/like/count/{postId}": {
      "get": {
        "operationId": "PostLikeController_getPostLikeCount",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the number of likes belonging to the postId.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "int",
                  "example": 15
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the post is not found or user does not have the right to access",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Post not found or unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "POST_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Like"
        ]
      }
    },
    "/v1/post/like/remove/{postId}": {
      "delete": {
        "operationId": "PostLikeController_removePostLike",
        "parameters": [
          {
            "name": "postId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User unlikes a post. Returns Created when some rows are affected and OK otherwise",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Post Like"
        ]
      }
    },
    "/v1/user-zone/list": {
      "get": {
        "operationId": "UserZoneController_getCurrentUserZones",
        "parameters": [
          {
            "name": "app-subdomain",
            "required": false,
            "in": "header",
            "description": "Zone subdomain",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of current user's zones. It also adds the public zone which is selected but not joined yet, Its userzoneId will be null when the user zone is not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserZoneListResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Zone"
        ]
      }
    },
    "/v1/user-zone/detail": {
      "get": {
        "operationId": "UserZoneController_getCurrentUserZone",
        "parameters": [
          {
            "name": "app-subdomain",
            "in": "header",
            "description": "Zone subdomain",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userZoneId",
            "required": true,
            "in": "path",
            "description": "User Zone Id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Get current user's zone detail, This is deduced from the current subdomain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserZoneListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the user zone ist not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Zone"
        ]
      }
    },
    "/v1/user-zone/detail/{userZoneId}": {
      "get": {
        "operationId": "UserZoneController_getUserZoneById",
        "parameters": [
          {
            "name": "userZoneId",
            "required": true,
            "in": "path",
            "description": "User Zone Id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Get user zone detail by user zone id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserZoneListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Zone"
        ]
      }
    },
    "/v1/user-zone/remove/{userZoneId}": {
      "delete": {
        "operationId": "UserZoneController_deleteUserZoneById",
        "parameters": [
          {
            "name": "userZoneId",
            "required": true,
            "in": "path",
            "description": "User Zone Id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Zone"
        ]
      }
    },
    "/v1/user-zone/remove/{zoneId}": {
      "delete": {
        "operationId": "UserZoneController_deleteUserZoneByZoneId",
        "parameters": [
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "description": "Zone Id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Zone"
        ]
      }
    },
    "/v1/zone/create": {
      "post": {
        "operationId": "ZoneController_createZone",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateZoneDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Current authenticated user adds a new zone. The id of the user zone is returned. User zone must have canCreateZone permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when new zone subdomain is not unique.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "The zone with requested subdomain already exist."
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_SUBDOMAIN_ALREADY_EXIST"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when current user membership zone creation limit is full",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Your channel zone operation failed due to insufficient membership."
                    },
                    "error": {
                      "type": "string",
                      "example": "INSUFFICIENT_MEMBERSHIP"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/update/{zoneId}": {
      "put": {
        "operationId": "ZoneController_editZone",
        "parameters": [
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "description": "The zone id",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditZoneDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updates a zone. User must have the canEdit permission on zone",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/remove/{zoneId}": {
      "delete": {
        "operationId": "ZoneController_deleteZone",
        "parameters": [
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "description": "The zone id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "User deletes a zone. User must have the canDelete permission on zone.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/search": {
      "get": {
        "operationId": "ZoneController_searchZone",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "searchTerm",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search zone with requested search term field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchZoneResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/users/list/{zoneId}": {
      "get": {
        "operationId": "ZoneController_zoneUserList",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lists zone users according to requested zone id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZoneUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/join/{zoneId}": {
      "post": {
        "operationId": "ZoneController_joinPublicZone",
        "parameters": [
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Current authenticated user joins a public zone. The id of the user zone is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the zone is not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/invite/{zoneId}": {
      "post": {
        "operationId": "ZoneController_inviteToJoinZone",
        "parameters": [
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteToJoinDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Current authenticated invites a user to this zone. The id of the invitation is returned. User must have canInvite permission on zone permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when the user is already invited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "The user with the email '<email>' has already been invited to this zone"
                    },
                    "error": {
                      "type": "string",
                      "example": "USER_ALREADY_INVITED_TO_ZONE"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error thrown when the user is already member of this zone",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "The user with the email '<email>' has already a member of this zone"
                    },
                    "error": {
                      "type": "string",
                      "example": "USER_ALREADY_MEMBER_OF_ZONE"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/invitation/response": {
      "post": {
        "operationId": "ZoneController_respondToInvitationToJoinZone",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Responds to invitation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the requested invitation is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Invitation not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVITATION_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/{userZoneId}/display-photo": {
      "put": {
        "operationId": "ZoneController_changeDisplayPhoto",
        "parameters": [
          {
            "name": "userZoneId",
            "required": true,
            "in": "path",
            "description": "Alternatively you can use zoneId",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photoFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Error thrown when the requested photo format invalid. Valid formats: jpg, jpeg, png, bmp and svg",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Please upload a valid photo format"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVALID_IMAGE_FORMAT"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/display-photo/{fileName}": {
      "get": {
        "operationId": "ZoneController_viewProfilePhoto",
        "parameters": [
          {
            "name": "fileName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get display photo of selected zone"
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/role/list/{zoneId}": {
      "get": {
        "operationId": "ZoneController_listZoneRoles",
        "parameters": [
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "description": "The zone id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User lists all zone roles. User must have canManageRole permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserZoneRoleResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/role/change/{zoneId}": {
      "put": {
        "operationId": "ZoneController_changeUserZoneRole",
        "parameters": [
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserZoneRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User changes a role for an existing user zone. User must have canManageRole permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when the specified zone has not any owner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "There must be at least one owner of zone."
                    },
                    "error": {
                      "type": "string",
                      "example": "OWNER_NOT_EXIST"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/role/remove/{zoneId}/{roleCode}": {
      "delete": {
        "operationId": "ZoneController_removeChannelRole",
        "parameters": [
          {
            "name": "roleCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "description": "The zone id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User removes a new zone role. User must have canManageRole permission. When a role is removed Created is returned else OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when the requested zone role already used for some users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Users using this role already exists"
                    },
                    "error": {
                      "type": "string",
                      "example": "USER_ROLE_EXIST"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/zone/permissions/update/{zoneId}": {
      "put": {
        "operationId": "ZoneController_updateUserRolePermissions",
        "parameters": [
          {
            "name": "zoneId",
            "required": true,
            "in": "path",
            "description": "The zone id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateZonePermission"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updates permissions for user role. User must have canManageRole permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when the the request is changed to owner role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Zone Owner Permissions can't be changed"
                    },
                    "error": {
                      "type": "string",
                      "example": "CHANGE_OWNER_PERMISSION"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Zone"
        ]
      }
    },
    "/v1/user/contact/invitation/response": {
      "post": {
        "operationId": "UserController_contactInvitationResponse",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInvitationResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User responds to contact invitation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when the requested contact id is same as authenticated user id.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "You cannot add yourself to your contacts"
                    },
                    "error": {
                      "type": "string",
                      "example": "CONTACT_ELIGIBILITY_ERROR"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the requested contact invitation not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Contact Invitation not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "CONTACT_INVITATION_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/contact/invitation/create": {
      "post": {
        "operationId": "UserController_createNewContactInvitation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User creates a new contact invitation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when the user already sent invitation to requested email.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Invitation to this user has already been sent"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVITATION_ALREADY_SENT_FOR_USER"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error thrown when the user already received invitation .",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "You have already been invited by this user"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVITATION_ALREADY_RECEIVED_FROM_USER"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/invitations/list": {
      "get": {
        "operationId": "UserController_getUserInvitations",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User lists all invitations, contacts, channels, zones",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInvitationListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/contact/list": {
      "get": {
        "operationId": "UserController_listContacts",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User lists contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/contact/list/{userName}": {
      "get": {
        "operationId": "UserController_listPublicUserContacts",
        "parameters": [
          {
            "name": "userName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User lists another public users contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/contact/remove/{contactId}": {
      "delete": {
        "operationId": "UserController_deleteContact",
        "parameters": [
          {
            "name": "contactId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User removes a contact by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/search": {
      "get": {
        "operationId": "UserController_searchUsers",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeIds",
            "required": false,
            "in": "query",
            "description": "User ids to exclude while searching. Should be a comma separated ids",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userContacts",
            "required": false,
            "in": "query",
            "description": "specify true to search in current user's contacts",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeCurrentUser",
            "required": false,
            "in": "query",
            "description": "Exclude current user in search. Specify false to disable this.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search user with requested payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/role/change": {
      "put": {
        "operationId": "UserController_changeUserRole",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User changes a role for an existing user. User must have canManageRole permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when changed user role is last super admin.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "There must be at least one super admin"
                    },
                    "error": {
                      "type": "string",
                      "example": "SUPER_ADMIN_NOT_EXIST"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/user-name-check": {
      "post": {
        "operationId": "UserController_userNameExistenceCheck",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserNameExistenceCheckDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Checks if user name provided has already been taken.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNameExistenceCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/zone/list/{userName}": {
      "get": {
        "operationId": "UserController_listPublicUserZones",
        "parameters": [
          {
            "name": "userName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List requested user public zones",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserZoneResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/channel/list/{userName}": {
      "get": {
        "operationId": "UserController_listPublicUserChannels",
        "parameters": [
          {
            "name": "userName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List requested user public channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChannelResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/profile": {
      "get": {
        "operationId": "UserController_getUserProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get authenticated user profile informations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      },
      "put": {
        "operationId": "UserController_updateUserProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates authenticated user profile informations with given request."
          },
          "400": {
            "description": "Error thrown when detected no changes between requested payload and current user information.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "No Changes detected"
                    },
                    "error": {
                      "type": "string",
                      "example": "NO_CHANGES_DETECTED"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when authenticated user informations are not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User profile not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "USER_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/profile/{userName}": {
      "get": {
        "operationId": "UserController_getPublicUserProfile",
        "parameters": [
          {
            "name": "userName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get public specified user profile informations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/display-photo": {
      "put": {
        "operationId": "UserController_changeDisplayPhoto",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photoFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates display photo of user with requested photo file and return new photo file URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Currently uploaded photo file url"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when the requested photo format invalid. Valid formats: jpg, jpeg, png, bmp and svg",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Please upload a valid photo format"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVALID_IMAGE_FORMAT"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      },
      "delete": {
        "operationId": "UserController_deleteDisplayPhoto",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Delete user display photo"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when user display photo is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "The specified user has not any display photo!"
                    },
                    "error": {
                      "type": "string",
                      "example": "USER_DISPLAY_PHOTO_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/user/display-photo/{fileName}": {
      "get": {
        "operationId": "UserController_viewProfilePhoto",
        "parameters": [
          {
            "name": "fileName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "View display photo of authenticated user"
          }
        },
        "tags": [
          "User"
        ]
      }
    },
    "/v1/channel/create/{userZoneId}": {
      "post": {
        "operationId": "ChannelController_createNewChannel",
        "parameters": [
          {
            "name": "userZoneId",
            "required": true,
            "in": "path",
            "description": "User zone id",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Current authenticated user adds a new channel to a zone. User channel id is returned. User channel must have canCreateChannel permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Zone not found. Error thrown when user zone is not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Zone not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "ZONE_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/search": {
      "get": {
        "operationId": "ChannelController_searchChannel",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "searchTerm",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zoneId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search channels with requested search term",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelSearchResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/join/{channelId}": {
      "post": {
        "operationId": "ChannelController_joinPublicChannel",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Current authenticated user joins a public channel. When the user doesn't belong to the zone he/she is added to that zone. The id of the user channel is returned"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the joined channel is not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Channel not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "CHANNEL_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/invite/{channelId}": {
      "post": {
        "operationId": "ChannelController_inviteToJoinChannel",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteToJoinChannelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Current authenticated channel member invites a user to this channel. The id of the invitation is returned. User channel must have canInvite permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when the user is already invited",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "The user with the email '<email>' has already been invited to this channel"
                    },
                    "error": {
                      "type": "string",
                      "example": "USER_ALREADY_INVITED_TO_CHANNEL"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/invitation/response": {
      "post": {
        "operationId": "ChannelController_respondToInvitationToJoinChannel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvitationResponseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Responds to invitation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the invitation is not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Invitation not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVITATION_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/remove/{channelId}": {
      "delete": {
        "operationId": "ChannelController_deleteZone",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "description": "The channel id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "User deletes a channel. User channel must have the canDelete permission"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/update/{channelId}": {
      "put": {
        "operationId": "ChannelController_editChannel",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "description": "The channel id",
            "schema": {}
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditChannelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updates a zone. User channel must have the canEdit permission"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/users/list/{channelId}": {
      "get": {
        "operationId": "ChannelController_channelUserList",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User lists channel users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelUserResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/role/list/{channelId}": {
      "get": {
        "operationId": "ChannelController_listChannelRoles",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User lists all channel roles. User must have canManageRole permission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelRole"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/role/change/{channelId}": {
      "put": {
        "operationId": "ChannelController_changeUserChannelRole",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelUserRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User changes a role for an existing user channel. User must have canManageRole permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when the specified channel has not any owner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "There must be at least one channel owner."
                    },
                    "error": {
                      "type": "string",
                      "example": "OWNER_NOT_EXIST"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/permissions/update/{channelId}": {
      "put": {
        "operationId": "ChannelController_updateUserRolePermissions",
        "parameters": [
          {
            "name": "channelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelPermission"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updates permissions for user role. User must have canManageRole permission",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when the the request is changed to owner role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Channel Owner Permissions can't be changed"
                    },
                    "error": {
                      "type": "string",
                      "example": "CHANGE_OWNER_PERMISSION"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/{userChannelId}/display-photo": {
      "put": {
        "operationId": "ChannelController_changeDisplayPhoto",
        "parameters": [
          {
            "name": "userChannelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photoFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Error thrown when the requested photo format invalid. Valid formats: jpg, jpeg, png, bmp and svg",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Please upload a valid photo format"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVALID_IMAGE_FORMAT"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/display-photo/{fileName}": {
      "get": {
        "operationId": "ChannelController_viewProfilePhoto",
        "parameters": [
          {
            "name": "fileName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get display photo of selected channel"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/{userChannelId}/background-photo": {
      "put": {
        "operationId": "ChannelController_changeBackgroundPhoto",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "photoFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Error thrown when the requested photo format invalid. Valid formats: jpg, jpeg, png, bmp and svg",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Please upload a valid photo format"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVALID_IMAGE_FORMAT"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/channel/background-photo/{fileName}": {
      "get": {
        "operationId": "ChannelController_viewBackgroundPhoto",
        "parameters": [
          {
            "name": "fileName",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get background photo of selected channel"
          }
        },
        "tags": [
          "Channel"
        ]
      }
    },
    "/v1/user-channel/list": {
      "get": {
        "operationId": "UserChannelController_getCurrentUserChannels",
        "parameters": [
          {
            "name": "app-subdomain",
            "required": false,
            "in": "header",
            "description": "Zone subdomain",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the list of current user's channels. Public channels of zone not joined yet will be listed when user is authorized in the zone(public, or userzone). But the userChannel id will be null",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChannelListResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Channel"
        ]
      }
    },
    "/v1/user-channel/list/all": {
      "get": {
        "operationId": "UserChannelController_getCurrentUserAllChannels",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the list of current user's channels. public channels of zone not joined yet will be listed when user is authorized in the zone(public, or userzone). But the userChannel id will be null",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserChannelListResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "User Channel"
        ]
      }
    },
    "/v1/user-channel/remove/{userChannelId}": {
      "delete": {
        "operationId": "UserChannelController_deleteUserChannelById",
        "parameters": [
          {
            "name": "UserZoneIdParams",
            "required": true,
            "in": "path",
            "description": "User Zone Id",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "User can leave from channel."
          },
          "400": {
            "description": "Error thrown when the owner of the channel want to leave from channel.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Channel owner can not unfollow the channel"
                    },
                    "error": {
                      "type": "string",
                      "example": "OWNER_CANT_UNFOLLOW_CHANNEL"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Channel not found"
          }
        },
        "tags": [
          "User Channel"
        ]
      }
    },
    "/v1/meeting/create": {
      "post": {
        "operationId": "MeetingController_createMeeting",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMeetingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User creates a new meeting. A meeting url is returned when meeting starts now else the id of the meeting is returned",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "string",
                      "example": "https://meet.jit.si/ab1-3a2-4vs"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when validation error occurs according to requested payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Meeting"
        ]
      }
    },
    "/v1/meeting/join-link/{slug}": {
      "get": {
        "operationId": "MeetingController_getMeetingJoinLink",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Meeting link with requested slug will returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "https://meet.jit.si/ab1-3a2-4vs"
                }
              }
            }
          },
          "400": {
            "description": "Error thrown when meeting's start date is less than now or meeting has already ended",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Meeting not started yet"
                        },
                        "error": {
                          "type": "string",
                          "example": "MEETING_NOT_STARTED"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Meeting has already ended"
                        },
                        "error": {
                          "type": "string",
                          "example": "MEETING_ALREADY_ENDED"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown is meeting doesn't exist",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Meeting not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "MEETING_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Meeting"
        ]
      }
    },
    "/v1/meeting/join/{token}": {
      "get": {
        "operationId": "MeetingController_joinMeeting",
        "parameters": [
          {
            "name": "token",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User redirected to meeting url"
          },
          "400": {
            "description": "Error thrown when meeting's start date is less than now or meeting has already ended",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Meeting not started yet"
                        },
                        "error": {
                          "type": "string",
                          "example": "MEETING_NOT_STARTED"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "integer",
                          "example": 404
                        },
                        "message": {
                          "type": "string",
                          "example": "Meeting has already ended"
                        },
                        "error": {
                          "type": "string",
                          "example": "MEETING_ALREADY_ENDED"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Error thrown is meeting doesn't exist or current user doesn't have the priviledge to join",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Meeting not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "MEETING_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Meeting"
        ]
      }
    },
    "/v1/meeting/config/user": {
      "get": {
        "operationId": "MeetingController_getCurrentUserMeetingConfig",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User loads meeting configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeetingConfig"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error thrown when the user meeting config not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "User Meeting configuration not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "MEETING_CONFIG_NOT_FOUND"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Meeting"
        ]
      }
    },
    "/v1/activity/list/suggestions/channels": {
      "get": {
        "operationId": "ActivityController_getPublicChannels",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User gets public channel suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicChannelSuggestionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/v1/activity/list/suggestions/zone": {
      "get": {
        "operationId": "ActivityController_getPublicZones",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User gets public zone suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicZoneSuggestionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/v1/activity/list/suggestions/contact": {
      "get": {
        "operationId": "ActivityController_getContactSuggestions",
        "parameters": [],
        "responses": {
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/v1/video/create": {
      "post": {
        "operationId": "VideoController_createVideoPost",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateVideoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload a video file successfully"
          },
          "400": {
            "description": "Error thrown when the requested video format invalid. Valid formats: 3gpp, mp4, quicktime, webm, x-flv and mpeg",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Please upload a valid video format"
                    },
                    "error": {
                      "type": "string",
                      "example": "INVALID_VIDEO_FORMAT"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Video"
        ]
      }
    },
    "/v1/chat/list/messages/{medium}/{id}": {
      "get": {
        "operationId": "ChatController_listChatMessages",
        "parameters": [
          {
            "name": "medium",
            "required": true,
            "in": "path",
            "description": "medium of the messages",
            "schema": {
              "type": "string",
              "enum": [
                "direct",
                "channel",
                "post"
              ]
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get. Defaults to 30",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "lastDate",
            "required": false,
            "in": "query",
            "description": "The last date of messages sent.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List chat messages with given params",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error thrown when given medium source not found with given credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "You are not authorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_AUTHORIZED"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chat"
        ]
      }
    },
    "/v1/chat/message/unread/counts": {
      "get": {
        "operationId": "ChatController_countUnreadMessages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get unread message count with each contact user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChatCountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chat"
        ]
      }
    },
    "/v1/chat/list/attachments/{medium}/{id}": {
      "get": {
        "operationId": "ChatController_listChatAttachments",
        "parameters": [
          {
            "name": "medium",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chat"
        ]
      }
    },
    "/v1/chat/attachment/{name}": {
      "get": {
        "operationId": "ChatController_getChatAttachment",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chat"
        ]
      },
      "delete": {
        "operationId": "ChatController_removeChatAttachment",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete specified chat attachment"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chat"
        ]
      }
    },
    "/v1/chat/attachment": {
      "post": {
        "operationId": "ChatController_addChatAttachment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Chat"
        ]
      }
    },
    "/v1/notification/count": {
      "get": {
        "operationId": "NotificationController_getNotificationCount",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get number of count of notification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCount"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ]
      }
    },
    "/v1/notification/list": {
      "get": {
        "operationId": "NotificationController_listNotifications",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of records to get.",
            "schema": {
              "default": 30,
              "type": "number"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "The number of records to skip. Defaults to 0",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Get all notifications, unread notifications or unread notifications",
            "schema": {
              "enum": [
                "all",
                "unread",
                "read"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List notifications with given query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ]
      }
    },
    "/v1/notification/view": {
      "post": {
        "operationId": "NotificationController_viewNotifications",
        "parameters": [
          {
            "name": "notificationIds",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "View specified notification and update readOn date property on notification"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ]
      }
    },
    "/v1/notification/read/{notificationId}": {
      "post": {
        "operationId": "NotificationController_readNotifications",
        "parameters": [
          {
            "name": "notificationId",
            "required": false,
            "in": "path",
            "allowEmptyValue": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read specified notification and update readOn date property on notification"
          },
          "401": {
            "description": "Error thrown when the user has not authorized or JWT is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "You not authorized to use this route"
                    },
                    "error": {
                      "type": "string",
                      "example": "NOT_SIGNED_IN"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ]
      }
    }
  },
  "info": {
    "title": "Purpie",
    "description": "Purpie API Documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "UserApiCredentials": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "apiSecret": {
            "type": "string"
          }
        },
        "required": [
          "apiKey",
          "apiSecret"
        ]
      },
      "LoginApiUserDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "apiSecret": {
            "type": "string"
          }
        },
        "required": [
          "apiKey",
          "apiSecret"
        ]
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "displayPhoto": {
            "type": "string"
          },
          "refreshTokenId": {
            "type": "string"
          },
          "userRole": {
            "type": "object",
            "properties": {
              "roleCode": {
                "type": "string",
                "example": "SUPER_ADMIN",
                "enum": [
                  "SUPER_ADMIN",
                  "ADMIN",
                  "NORMAL"
                ]
              },
              "roleName": {
                "type": "string",
                "example": "Super Admin"
              },
              "canCreateZone": {
                "type": "boolean"
              },
              "canCreateClient": {
                "type": "boolean"
              },
              "canManageRole": {
                "type": "boolean"
              }
            }
          }
        },
        "required": [
          "id",
          "fullName",
          "email",
          "userRole"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "example": 400
          },
          "message": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "type": "string",
            "example": "Bad Request"
          }
        },
        "required": [
          "statusCode",
          "message",
          "error"
        ]
      },
      "PostFeedUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "displayPhoto": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "fullName",
          "userName",
          "email"
        ]
      },
      "PostFeedReaction": {
        "type": "object",
        "properties": {
          "likesCount": {
            "type": "number",
            "default": 0
          },
          "dislikesCount": {
            "type": "number",
            "default": 0
          },
          "commentsCount": {
            "type": "number",
            "default": 0
          },
          "viewsCount": {
            "type": "number",
            "default": 0
          },
          "liveStreamViewersCount": {
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "likesCount",
          "dislikesCount",
          "commentsCount",
          "viewsCount",
          "liveStreamViewersCount"
        ]
      },
      "PostFeedZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "name",
          "subdomain",
          "public"
        ]
      },
      "PostFeedChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "zone": {
            "$ref": "#/components/schemas/PostFeedZone"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "public",
          "zone"
        ]
      },
      "BasePostFeedList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "startDate": {
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "type": "string"
          },
          "conferenceStartDate": {
            "format": "date-time",
            "type": "string"
          },
          "conferenceEndDate": {
            "format": "date-time",
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "meeting",
              "video",
              "livestream"
            ],
            "default": "meeting"
          },
          "createdById": {
            "type": "string"
          },
          "channelId": {
            "type": "number",
            "nullable": true
          },
          "streaming": {
            "type": "boolean",
            "default": false
          },
          "public": {
            "type": "boolean",
            "default": false
          },
          "liveStream": {
            "type": "boolean",
            "default": false
          },
          "record": {
            "type": "boolean",
            "default": false
          },
          "videoName": {
            "type": "string"
          },
          "postReactionId": {
            "type": "string"
          },
          "allowDislike": {
            "type": "boolean",
            "default": true
          },
          "allowReaction": {
            "type": "boolean",
            "default": true
          },
          "allowComment": {
            "type": "boolean",
            "default": true
          },
          "liked": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "viewed": {
            "type": "boolean"
          },
          "disliked": {
            "type": "boolean"
          },
          "createdBy": {
            "$ref": "#/components/schemas/PostFeedUser"
          },
          "postReaction": {
            "$ref": "#/components/schemas/PostFeedReaction"
          },
          "channel": {
            "$ref": "#/components/schemas/PostFeedChannel"
          }
        },
        "required": [
          "id",
          "createdOn",
          "title",
          "slug",
          "type",
          "channelId",
          "streaming",
          "public",
          "liveStream",
          "record",
          "allowDislike",
          "allowReaction",
          "allowComment",
          "createdBy",
          "postReaction"
        ]
      },
      "PublicPostFeedListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasePostFeedList"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "EditPostDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          }
        }
      },
      "VideoViewStats": {
        "type": "object",
        "properties": {
          "startedFrom": {
            "type": "number"
          },
          "endedAt": {
            "type": "number"
          },
          "postId": {
            "type": "string"
          }
        },
        "required": [
          "startedFrom",
          "endedAt",
          "postId"
        ]
      },
      "CreatePostCommentDto": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "postId": {
            "type": "string"
          },
          "parentId": {
            "type": "string",
            "description": "If reply specify the parent post."
          }
        },
        "required": [
          "comment",
          "postId"
        ]
      },
      "PostCommentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "parentId": {
            "type": "number",
            "nullable": true
          },
          "userId": {
            "type": "string"
          },
          "postId": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "replyCount": {
            "type": "number",
            "nullable": true
          },
          "likesCount": {
            "type": "number",
            "nullable": true
          },
          "liked": {
            "type": "boolean",
            "nullable": true
          },
          "publishedInLiveStream": {
            "type": "boolean"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "updatedOn": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "parentId",
          "userId",
          "postId",
          "comment",
          "replyCount",
          "likesCount",
          "liked",
          "publishedInLiveStream",
          "createdOn",
          "updatedOn"
        ]
      },
      "PostCommentListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostCommentResponse"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "UpdatePostCommentDto": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "commentId": {
            "type": "string"
          }
        },
        "required": [
          "comment",
          "commentId"
        ]
      },
      "CreatePostCommentLikeDto": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string"
          },
          "postCommentId": {
            "type": "string"
          }
        },
        "required": [
          "postId",
          "postCommentId"
        ]
      },
      "PostLikeList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "user": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "updatedOn": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "user",
          "createdOn",
          "updatedOn"
        ]
      },
      "PostLikeListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostLikeList"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "PostFolderResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "updatedOn": {
            "format": "date-time",
            "type": "string"
          },
          "postId": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "post": {
            "$ref": "#/components/schemas/BasePostFeedList"
          }
        },
        "required": [
          "id",
          "createdOn",
          "postId",
          "folderId",
          "post"
        ]
      },
      "CreatePostFolderDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "postId": {
            "type": "object",
            "description": "This is the first post that will be added to the folder"
          }
        },
        "required": [
          "title"
        ]
      },
      "UpdatePostFolderDto": {
        "type": "object",
        "properties": {
          "folderId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "folderId"
        ]
      },
      "AddOrRemovePostFolderItemDto": {
        "type": "object",
        "properties": {
          "folderId": {
            "type": "string"
          },
          "postId": {
            "type": "string"
          }
        },
        "required": [
          "folderId",
          "postId"
        ]
      },
      "CreatePostLikeDto": {
        "type": "object",
        "properties": {
          "postId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "like",
              "dislike"
            ]
          }
        },
        "required": [
          "postId"
        ]
      },
      "ZoneUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "fullName",
          "email"
        ]
      },
      "ZoneForUserZoneList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "displayPhoto": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "createdBy": {
            "$ref": "#/components/schemas/ZoneUser"
          }
        },
        "required": [
          "id",
          "name",
          "subdomain",
          "description",
          "public",
          "createdBy"
        ]
      },
      "UserZoneRoleResponse": {
        "type": "object",
        "properties": {
          "roleCode": {
            "type": "string",
            "enum": [
              "OWNER",
              "MODERATOR",
              "USER"
            ]
          },
          "zoneId": {
            "type": "string"
          },
          "roleName": {
            "type": "string"
          },
          "canCreateChannel": {
            "type": "boolean"
          },
          "canInvite": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canManageRole": {
            "type": "boolean"
          }
        },
        "required": [
          "roleCode",
          "zoneId",
          "roleName",
          "canCreateChannel",
          "canInvite",
          "canDelete",
          "canEdit",
          "canManageRole"
        ]
      },
      "UserZoneListResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "zone": {
            "$ref": "#/components/schemas/ZoneForUserZoneList"
          },
          "zoneRole": {
            "$ref": "#/components/schemas/UserZoneRoleResponse"
          }
        },
        "required": [
          "id",
          "createdOn",
          "zone",
          "zoneRole"
        ]
      },
      "CreateZoneDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subdomain": {
            "type": "string",
            "minimum": 3,
            "maximum": 32,
            "pattern": "/^(?![0-9]+$)(?!.*-$)(?!-)[a-zA-Z0-9-]{3,32}$/g",
            "description": "Subdomain which will be used as zone address. See: https://datatracker.ietf.org/doc/html/rfc1035"
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "subdomain"
        ]
      },
      "EditZoneDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          }
        }
      },
      "SearchZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "displayPhoto": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdOn",
          "name",
          "subdomain",
          "public"
        ]
      },
      "SearchZoneResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchZone"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "displayPhoto": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "fullName",
          "userName",
          "email"
        ]
      },
      "ZoneUserItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "zoneRole": {
            "$ref": "#/components/schemas/UserZoneRoleResponse"
          }
        },
        "required": [
          "id",
          "createdOn",
          "user",
          "zoneRole"
        ]
      },
      "ZoneUserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneUserItem"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "InviteToJoinDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "InvitationResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "accept",
              "reject"
            ]
          },
          "invitationId": {
            "type": "number"
          }
        },
        "required": [
          "status",
          "invitationId"
        ]
      },
      "UpdateUserZoneRoleDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "zoneRoleCode": {
            "type": "string"
          }
        },
        "required": [
          "userId",
          "zoneRoleCode"
        ]
      },
      "UpdateZonePermission": {
        "type": "object",
        "properties": {
          "roleCode": {
            "type": "string"
          },
          "zoneId": {
            "type": "string"
          },
          "canCreateChannel": {
            "type": "boolean"
          },
          "canInvite": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canManageRole": {
            "type": "boolean"
          }
        }
      },
      "ContactInvitationResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "accept",
              "reject"
            ]
          },
          "contactInvitationId": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "contactInvitationId"
        ]
      },
      "CreateContactDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "Inviter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "email": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "displayPhoto": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "fullName",
          "userName",
          "displayPhoto"
        ]
      },
      "ContactInvitationList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "inviter": {
            "$ref": "#/components/schemas/Inviter"
          }
        },
        "required": [
          "id",
          "createdOn",
          "inviter"
        ]
      },
      "ContactInvitationListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInvitationList"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "ContactUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "email": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email",
          "userName",
          "fullName"
        ]
      },
      "ContactList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "contactUser": {
            "$ref": "#/components/schemas/ContactUser"
          }
        },
        "required": [
          "id",
          "createdOn",
          "contactUser"
        ]
      },
      "ContactListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactList"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "SearchUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "displayPhoto": {
            "type": "string"
          },
          "contactUserId": {
            "type": "string"
          },
          "invited": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "fullName",
          "email",
          "userName"
        ]
      },
      "UserSearchResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchUser"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "SetUserRoleDto": {
        "type": "object",
        "properties": {
          "roleCode": {
            "type": "string"
          },
          "userId": {
            "type": "number"
          }
        },
        "required": [
          "roleCode",
          "userId"
        ]
      },
      "UserNameExistenceCheckDto": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "userName"
        ]
      },
      "UserNameExistenceCheckResponse": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string"
          },
          "exist": {
            "type": "boolean"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "userName",
          "exist",
          "suggestions"
        ]
      },
      "Zone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "displayPhoto": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdOn",
          "name",
          "subdomain",
          "public"
        ]
      },
      "UserZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "zone": {
            "$ref": "#/components/schemas/Zone"
          }
        },
        "required": [
          "id",
          "zone"
        ]
      },
      "UserZoneResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserZone"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "Channel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "displayPhoto": {
            "type": "string"
          },
          "zoneId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdOn",
          "name",
          "public",
          "zoneId"
        ]
      },
      "UserChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "zone": {
            "$ref": "#/components/schemas/Channel"
          }
        },
        "required": [
          "id",
          "zone"
        ]
      },
      "UserChannelResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserChannel"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        },
        "required": [
          "fullName",
          "userName"
        ]
      },
      "CreateChannelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 32
          },
          "description": {
            "type": "string",
            "maxLength": 256
          },
          "public": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "ChannelZone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subdomain": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "subdomain"
        ]
      },
      "SearchChannel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "displayPhoto": {
            "type": "string"
          },
          "zone": {
            "$ref": "#/components/schemas/ChannelZone"
          }
        },
        "required": [
          "id",
          "createdOn",
          "name",
          "public",
          "zone"
        ]
      },
      "ChannelSearchResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchChannel"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "InviteToJoinChannelDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "EditChannelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          }
        }
      },
      "ChannelRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "roleCode": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "canInvite": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canManageRole": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "roleCode",
          "channelId",
          "canInvite",
          "canDelete",
          "canEdit",
          "canManageRole"
        ]
      },
      "ChannelUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "channelRole": {
            "$ref": "#/components/schemas/ChannelRole"
          }
        },
        "required": [
          "id",
          "createdOn",
          "user",
          "channelRole"
        ]
      },
      "ChannelUserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelUser"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "UpdateChannelUserRoleDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "channelRoleCode": {
            "type": "string"
          }
        },
        "required": [
          "userId",
          "channelRoleCode"
        ]
      },
      "UpdateChannelPermission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "roleCode": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "canInvite": {
            "type": "boolean"
          },
          "canDelete": {
            "type": "boolean"
          },
          "canEdit": {
            "type": "boolean"
          },
          "canManageRole": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "roleCode",
          "channelId",
          "canInvite",
          "canDelete",
          "canEdit",
          "canManageRole"
        ]
      },
      "ChannelForUserChannelList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "zoneId": {
            "type": "number"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "public",
          "zoneId",
          "createdBy"
        ]
      },
      "UserChannelListResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ChannelForUserChannelList"
          },
          "channelRole": {
            "$ref": "#/components/schemas/ChannelRole"
          }
        },
        "required": [
          "id",
          "createdOn",
          "channel",
          "channelRole"
        ]
      },
      "JitsiConfig": {
        "type": "object",
        "properties": {
          "startWithAudioMuted": {
            "type": "boolean"
          },
          "enableNoisyMicDetection": {
            "type": "boolean"
          },
          "disableResponsiveTiles": {
            "type": "boolean"
          },
          "hideLobbyButton": {
            "type": "boolean"
          },
          "disableProfile": {
            "type": "boolean"
          },
          "disableRecordAudioNotification": {
            "type": "boolean"
          },
          "disableRemoteMute": {
            "type": "boolean"
          },
          "enableNoAudioDetection": {
            "type": "boolean"
          },
          "startScreenSharing": {
            "type": "boolean"
          },
          "disableJoinLeaveSounds": {
            "type": "boolean"
          },
          "hideConferenceSubject": {
            "type": "boolean"
          },
          "hideParticipantsStats": {
            "type": "boolean"
          },
          "hideConferenceTimer": {
            "type": "boolean"
          },
          "fileRecordingsEnabled": {
            "type": "boolean"
          },
          "defaultLanguage": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "liveStreamingEnabled": {
            "type": "boolean"
          },
          "autoCaptionOnRecord": {
            "type": "boolean"
          },
          "disableShortcuts": {
            "type": "boolean"
          },
          "requireDisplayName": {
            "type": "boolean"
          },
          "startAudioMuted": {
            "type": "number"
          },
          "startVideoMuted": {
            "type": "number"
          },
          "startWithVideoMuted": {
            "type": "boolean"
          },
          "transcribingEnabled": {
            "type": "boolean"
          },
          "prejoinPageEnabled": {
            "type": "boolean"
          },
          "startAudioOnly": {
            "type": "boolean"
          },
          "toolbarButtons": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "disableAudioLevels": {
            "type": "boolean"
          },
          "disableTileView": {
            "type": "boolean"
          },
          "audioLevelsInterval": {
            "type": "number"
          }
        }
      },
      "CreateMeetingDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startDate": {
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "format": "date-time",
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "config": {
            "$ref": "#/components/schemas/JitsiConfig"
          },
          "saveConfig": {
            "type": "boolean"
          },
          "liveStream": {
            "type": "boolean"
          },
          "allowDislike": {
            "type": "boolean"
          },
          "allowReaction": {
            "type": "boolean"
          },
          "allowComment": {
            "type": "boolean"
          },
          "record": {
            "type": "boolean"
          },
          "invitationIds": {
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "timeZone": {
            "type": "string",
            "enum": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Addis_Ababa",
              "Africa/Algiers",
              "Africa/Asmara",
              "Africa/Asmera",
              "Africa/Bamako",
              "Africa/Bangui",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Blantyre",
              "Africa/Brazzaville",
              "Africa/Bujumbura",
              "Africa/Cairo",
              "Africa/Casablanca",
              "Africa/Ceuta",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Douala",
              "Africa/El_Aaiun",
              "Africa/Freetown",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Kigali",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Lome",
              "Africa/Luanda",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Malabo",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Africa/Mogadishu",
              "Africa/Monrovia",
              "Africa/Nairobi",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Porto-Novo",
              "Africa/Sao_Tome",
              "Africa/Timbuktu",
              "Africa/Tripoli",
              "Africa/Tunis",
              "Africa/Windhoek",
              "America/Adak",
              "America/Anchorage",
              "America/Anguilla",
              "America/Antigua",
              "America/Araguaina",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Catamarca",
              "America/Argentina/ComodRivadavia",
              "America/Argentina/Cordoba",
              "America/Argentina/Jujuy",
              "America/Argentina/La_Rioja",
              "America/Argentina/Mendoza",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Aruba",
              "America/Asuncion",
              "America/Atikokan",
              "America/Atka",
              "America/Bahia",
              "America/Bahia_Banderas",
              "America/Barbados",
              "America/Belem",
              "America/Belize",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Bogota",
              "America/Boise",
              "America/Buenos_Aires",
              "America/Cambridge_Bay",
              "America/Campo_Grande",
              "America/Cancun",
              "America/Caracas",
              "America/Catamarca",
              "America/Cayenne",
              "America/Cayman",
              "America/Chicago",
              "America/Chihuahua",
              "America/Coral_Harbour",
              "America/Cordoba",
              "America/Costa_Rica",
              "America/Creston",
              "America/Cuiaba",
              "America/Curacao",
              "America/Danmarkshavn",
              "America/Dawson",
              "America/Dawson_Creek",
              "America/Denver",
              "America/Detroit",
              "America/Dominica",
              "America/Edmonton",
              "America/Eirunepe",
              "America/El_Salvador",
              "America/Ensenada",
              "America/Fort_Nelson",
              "America/Fort_Wayne",
              "America/Fortaleza",
              "America/Glace_Bay",
              "America/Godthab",
              "America/Goose_Bay",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guatemala",
              "America/Guayaquil",
              "America/Guyana",
              "America/Halifax",
              "America/Havana",
              "America/Hermosillo",
              "America/Indiana/Indianapolis",
              "America/Indiana/Knox",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Tell_City",
              "America/Indiana/Vevay",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Indianapolis",
              "America/Inuvik",
              "America/Iqaluit",
              "America/Jamaica",
              "America/Jujuy",
              "America/Juneau",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Knox_IN",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lima",
              "America/Los_Angeles",
              "America/Louisville",
              "America/Lower_Princes",
              "America/Maceio",
              "America/Managua",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Mendoza",
              "America/Menominee",
              "America/Merida",
              "America/Metlakatla",
              "America/Mexico_City",
              "America/Miquelon",
              "America/Moncton",
              "America/Monterrey",
              "America/Montevideo",
              "America/Montreal",
              "America/Montserrat",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Nome",
              "America/Noronha",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Ojinaga",
              "America/Panama",
              "America/Pangnirtung",
              "America/Paramaribo",
              "America/Phoenix",
              "America/Port-au-Prince",
              "America/Port_of_Spain",
              "America/Porto_Acre",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Punta_Arenas",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Recife",
              "America/Regina",
              "America/Resolute",
              "America/Rio_Branco",
              "America/Rosario",
              "America/Santa_Isabel",
              "America/Santarem",
              "America/Santiago",
              "America/Santo_Domingo",
              "America/Sao_Paulo",
              "America/Scoresbysund",
              "America/Shiprock",
              "America/Sitka",
              "America/St_Barthelemy",
              "America/St_Johns",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Swift_Current",
              "America/Tegucigalpa",
              "America/Thule",
              "America/Thunder_Bay",
              "America/Tijuana",
              "America/Toronto",
              "America/Tortola",
              "America/Vancouver",
              "America/Virgin",
              "America/Whitehorse",
              "America/Winnipeg",
              "America/Yakutat",
              "America/Yellowknife",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Macquarie",
              "Antarctica/Mawson",
              "Antarctica/McMurdo",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/South_Pole",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "Arctic/Longyearbyen",
              "Asia/Aden",
              "Asia/Almaty",
              "Asia/Amman",
              "Asia/Anadyr",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Ashkhabad",
              "Asia/Atyrau",
              "Asia/Baghdad",
              "Asia/Bahrain",
              "Asia/Baku",
              "Asia/Bangkok",
              "Asia/Barnaul",
              "Asia/Beirut",
              "Asia/Bishkek",
              "Asia/Brunei",
              "Asia/Calcutta",
              "Asia/Chita",
              "Asia/Choibalsan",
              "Asia/Chongqing",
              "Asia/Chungking",
              "Asia/Colombo",
              "Asia/Dacca",
              "Asia/Damascus",
              "Asia/Dhaka",
              "Asia/Dili",
              "Asia/Dubai",
              "Asia/Dushanbe",
              "Asia/Famagusta",
              "Asia/Gaza",
              "Asia/Harbin",
              "Asia/Hebron",
              "Asia/Ho_Chi_Minh",
              "Asia/Hong_Kong",
              "Asia/Hovd",
              "Asia/Irkutsk",
              "Asia/Istanbul",
              "Asia/Jakarta",
              "Asia/Jayapura",
              "Asia/Jerusalem",
              "Asia/Kabul",
              "Asia/Kamchatka",
              "Asia/Karachi",
              "Asia/Kashgar",
              "Asia/Kathmandu",
              "Asia/Katmandu",
              "Asia/Khandyga",
              "Asia/Kolkata",
              "Asia/Krasnoyarsk",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Kuwait",
              "Asia/Macao",
              "Asia/Macau",
              "Asia/Magadan",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Muscat",
              "Asia/Nicosia",
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk",
              "Asia/Oral",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Pyongyang",
              "Asia/Qatar",
              "Asia/Qostanay",
              "Asia/Qyzylorda",
              "Asia/Rangoon",
              "Asia/Riyadh",
              "Asia/Saigon",
              "Asia/Sakhalin",
              "Asia/Samarkand",
              "Asia/Seoul",
              "Asia/Shanghai",
              "Asia/Singapore",
              "Asia/Srednekolymsk",
              "Asia/Taipei",
              "Asia/Tashkent",
              "Asia/Tbilisi",
              "Asia/Tehran",
              "Asia/Tel_Aviv",
              "Asia/Thimbu",
              "Asia/Thimphu",
              "Asia/Tokyo",
              "Asia/Tomsk",
              "Asia/Ujung_Pandang",
              "Asia/Ulaanbaatar",
              "Asia/Ulan_Bator",
              "Asia/Urumqi",
              "Asia/Ust-Nera",
              "Asia/Vientiane",
              "Asia/Vladivostok",
              "Asia/Yakutsk",
              "Asia/Yangon",
              "Asia/Yekaterinburg",
              "Asia/Yerevan",
              "Atlantic/Azores",
              "Atlantic/Bermuda",
              "Atlantic/Canary",
              "Atlantic/Cape_Verde",
              "Atlantic/Faeroe",
              "Atlantic/Faroe",
              "Atlantic/Jan_Mayen",
              "Atlantic/Madeira",
              "Atlantic/Reykjavik",
              "Atlantic/South_Georgia",
              "Atlantic/St_Helena",
              "Atlantic/Stanley",
              "Australia/ACT",
              "Australia/Adelaide",
              "Australia/Brisbane",
              "Australia/Broken_Hill",
              "Australia/Canberra",
              "Australia/Currie",
              "Australia/Darwin",
              "Australia/Eucla",
              "Australia/Hobart",
              "Australia/LHI",
              "Australia/Lindeman",
              "Australia/Lord_Howe",
              "Australia/Melbourne",
              "Australia/NSW",
              "Australia/North",
              "Australia/Perth",
              "Australia/Queensland",
              "Australia/South",
              "Australia/Sydney",
              "Australia/Tasmania",
              "Australia/Victoria",
              "Australia/West",
              "Australia/Yancowinna",
              "Brazil/Acre",
              "Brazil/DeNoronha",
              "Brazil/East",
              "Brazil/West",
              "CET",
              "CST6CDT",
              "Canada/Atlantic",
              "Canada/Central",
              "Canada/Eastern",
              "Canada/Mountain",
              "Canada/Newfoundland",
              "Canada/Pacific",
              "Canada/Saskatchewan",
              "Canada/Yukon",
              "Chile/Continental",
              "Chile/EasterIsland",
              "Cuba",
              "EET",
              "EST5EDT",
              "Egypt",
              "Eire",
              "Etc/GMT",
              "Etc/GMT+0",
              "Etc/GMT+1",
              "Etc/GMT+10",
              "Etc/GMT+11",
              "Etc/GMT+12",
              "Etc/GMT+2",
              "Etc/GMT+3",
              "Etc/GMT+4",
              "Etc/GMT+5",
              "Etc/GMT+6",
              "Etc/GMT+7",
              "Etc/GMT+8",
              "Etc/GMT+9",
              "Etc/GMT-0",
              "Etc/GMT-1",
              "Etc/GMT-10",
              "Etc/GMT-11",
              "Etc/GMT-12",
              "Etc/GMT-13",
              "Etc/GMT-14",
              "Etc/GMT-2",
              "Etc/GMT-3",
              "Etc/GMT-4",
              "Etc/GMT-5",
              "Etc/GMT-6",
              "Etc/GMT-7",
              "Etc/GMT-8",
              "Etc/GMT-9",
              "Etc/GMT0",
              "Etc/Greenwich",
              "Etc/UCT",
              "Etc/UTC",
              "Etc/Universal",
              "Etc/Zulu",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Astrakhan",
              "Europe/Athens",
              "Europe/Belfast",
              "Europe/Belgrade",
              "Europe/Berlin",
              "Europe/Bratislava",
              "Europe/Brussels",
              "Europe/Bucharest",
              "Europe/Budapest",
              "Europe/Busingen",
              "Europe/Chisinau",
              "Europe/Copenhagen",
              "Europe/Dublin",
              "Europe/Gibraltar",
              "Europe/Guernsey",
              "Europe/Helsinki",
              "Europe/Isle_of_Man",
              "Europe/Istanbul",
              "Europe/Jersey",
              "Europe/Kaliningrad",
              "Europe/Kiev",
              "Europe/Kirov",
              "Europe/Lisbon",
              "Europe/Ljubljana",
              "Europe/London",
              "Europe/Luxembourg",
              "Europe/Madrid",
              "Europe/Malta",
              "Europe/Mariehamn",
              "Europe/Minsk",
              "Europe/Monaco",
              "Europe/Moscow",
              "Europe/Nicosia",
              "Europe/Oslo",
              "Europe/Paris",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Riga",
              "Europe/Rome",
              "Europe/Samara",
              "Europe/San_Marino",
              "Europe/Sarajevo",
              "Europe/Saratov",
              "Europe/Simferopol",
              "Europe/Skopje",
              "Europe/Sofia",
              "Europe/Stockholm",
              "Europe/Tallinn",
              "Europe/Tirane",
              "Europe/Tiraspol",
              "Europe/Ulyanovsk",
              "Europe/Uzhgorod",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Vilnius",
              "Europe/Volgograd",
              "Europe/Warsaw",
              "Europe/Zagreb",
              "Europe/Zaporozhye",
              "Europe/Zurich",
              "GB",
              "GB-Eire",
              "GMT",
              "GMT0",
              "Greenwich",
              "Hongkong",
              "Iceland",
              "Indian/Antananarivo",
              "Indian/Chagos",
              "Indian/Christmas",
              "Indian/Cocos",
              "Indian/Comoro",
              "Indian/Kerguelen",
              "Indian/Mahe",
              "Indian/Maldives",
              "Indian/Mauritius",
              "Indian/Mayotte",
              "Indian/Reunion",
              "Iran",
              "Israel",
              "Jamaica",
              "Japan",
              "Kwajalein",
              "Libya",
              "MET",
              "MST7MDT",
              "Mexico/BajaNorte",
              "Mexico/BajaSur",
              "Mexico/General",
              "NZ",
              "NZ-CHAT",
              "Navajo",
              "PRC",
              "PST8PDT",
              "Pacific/Apia",
              "Pacific/Auckland",
              "Pacific/Bougainville",
              "Pacific/Chatham",
              "Pacific/Chuuk",
              "Pacific/Easter",
              "Pacific/Efate",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Fiji",
              "Pacific/Funafuti",
              "Pacific/Galapagos",
              "Pacific/Gambier",
              "Pacific/Guadalcanal",
              "Pacific/Guam",
              "Pacific/Honolulu",
              "Pacific/Johnston",
              "Pacific/Kiritimati",
              "Pacific/Kosrae",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Marquesas",
              "Pacific/Midway",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Norfolk",
              "Pacific/Noumea",
              "Pacific/Pago_Pago",
              "Pacific/Palau",
              "Pacific/Pitcairn",
              "Pacific/Pohnpei",
              "Pacific/Ponape",
              "Pacific/Port_Moresby",
              "Pacific/Rarotonga",
              "Pacific/Saipan",
              "Pacific/Samoa",
              "Pacific/Tahiti",
              "Pacific/Tarawa",
              "Pacific/Tongatapu",
              "Pacific/Truk",
              "Pacific/Wake",
              "Pacific/Wallis",
              "Pacific/Yap",
              "Poland",
              "Portugal",
              "ROK",
              "Singapore",
              "SystemV/AST4",
              "SystemV/AST4ADT",
              "SystemV/CST6",
              "SystemV/CST6CDT",
              "SystemV/EST5",
              "SystemV/EST5EDT",
              "SystemV/HST10",
              "SystemV/MST7",
              "SystemV/MST7MDT",
              "SystemV/PST8",
              "SystemV/PST8PDT",
              "SystemV/YST9",
              "SystemV/YST9YDT",
              "Turkey",
              "UCT",
              "US/Alaska",
              "US/Aleutian",
              "US/Arizona",
              "US/Central",
              "US/East-Indiana",
              "US/Eastern",
              "US/Hawaii",
              "US/Indiana-Starke",
              "US/Michigan",
              "US/Mountain",
              "US/Pacific",
              "US/Pacific-New",
              "US/Samoa",
              "UTC",
              "Universal",
              "W-SU",
              "WET",
              "Zulu"
            ]
          },
          "joinLinkExpiryAsHours": {
            "type": "number"
          }
        }
      },
      "PrivacyConfig": {
        "type": "object",
        "properties": {
          "public": {
            "type": "boolean"
          },
          "liveStream": {
            "type": "boolean"
          },
          "record": {
            "type": "boolean"
          },
          "joinLinkExpiryAsHours": {
            "type": "number"
          }
        }
      },
      "MeetingConfig": {
        "type": "object",
        "properties": {
          "jitsiConfig": {
            "$ref": "#/components/schemas/JitsiConfig"
          },
          "privacyConfig": {
            "$ref": "#/components/schemas/PrivacyConfig"
          }
        },
        "required": [
          "jitsiConfig",
          "privacyConfig"
        ]
      },
      "PublicChannelSuggestionList": {
        "type": "object",
        "properties": {
          "channel_id": {
            "type": "number"
          },
          "channel_createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "channel_name": {
            "type": "string"
          },
          "channel_description": {
            "type": "string"
          },
          "channel_public": {
            "type": "boolean"
          },
          "zone_id": {
            "type": "number"
          },
          "zone_name": {
            "type": "string"
          },
          "zone_subdomain": {
            "type": "string"
          },
          "channel_membersCount": {
            "type": "string"
          }
        },
        "required": [
          "channel_id",
          "channel_createdOn",
          "channel_name",
          "channel_description",
          "channel_public",
          "zone_id",
          "zone_name",
          "zone_subdomain",
          "channel_membersCount"
        ]
      },
      "PublicChannelSuggestionListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicChannelSuggestionList"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "PublicZoneSuggestionList": {
        "type": "object",
        "properties": {
          "zone_id": {
            "type": "number"
          },
          "zone_createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "zone_name": {
            "type": "string"
          },
          "zone_subdomain": {
            "type": "string"
          },
          "zone_description": {
            "type": "string"
          },
          "channel_public": {
            "type": "boolean"
          },
          "zone_channelCount": {
            "type": "string"
          },
          "zone_membersCount": {
            "type": "string"
          }
        },
        "required": [
          "zone_id",
          "zone_createdOn",
          "zone_name",
          "zone_subdomain",
          "zone_description",
          "channel_public",
          "zone_channelCount",
          "zone_membersCount"
        ]
      },
      "PublicZoneSuggestionListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicZoneSuggestionList"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "CreateVideoDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "channelId": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "videoFile": {
            "type": "string",
            "format": "binary"
          },
          "allowDislike": {
            "type": "boolean"
          },
          "allowReaction": {
            "type": "boolean"
          },
          "allowComment": {
            "type": "boolean"
          }
        },
        "required": [
          "title",
          "videoFile"
        ]
      },
      "Chat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "parentIdentifier": {
            "type": "string"
          },
          "medium": {
            "type": "string",
            "enum": [
              "direct",
              "channel",
              "post"
            ]
          },
          "to": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "readOn": {
            "format": "date-time",
            "type": "string"
          },
          "isSystemMessage": {
            "type": "boolean"
          },
          "edited": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "createdById": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "createdOn",
          "identifier",
          "medium",
          "to",
          "message",
          "isSystemMessage",
          "edited",
          "deleted",
          "createdById",
          "createdBy",
          "attachments"
        ]
      },
      "ChatListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Chat"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      },
      "ChatCountResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "count": {
            "type": "number"
          }
        },
        "required": [
          "userId",
          "count"
        ]
      },
      "NotificationCount": {
        "type": "object",
        "properties": {
          "unviewedCount": {
            "type": "number"
          },
          "unreadCount": {
            "type": "number"
          }
        },
        "required": [
          "unviewedCount",
          "unreadCount"
        ]
      },
      "NotificationPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdOn",
          "title"
        ]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdOn": {
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "counter": {
            "type": "number"
          },
          "type": {
            "type": "string"
          },
          "readOn": {
            "format": "date-time",
            "type": "string"
          },
          "viewedOn": {
            "format": "date-time",
            "type": "string"
          },
          "post": {
            "$ref": "#/components/schemas/NotificationPost"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "createdOn",
          "counter",
          "type",
          "readOn",
          "viewedOn",
          "post",
          "createdBy"
        ]
      },
      "NotificationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "total": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "skip": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "total",
          "limit",
          "skip"
        ]
      }
    }
  }
}