env OCTOPUS_URL;
env OCTOPUS_API_KEY;
env OCTOPUS_API_SECRET;
env AWS_ACCESS_KEY;
env AWS_ACCESS_SECRET;
env AWS_DEFAULT_REGION;
env S3_BUCKET_NAME;


worker_processes auto;
rtmp_auto_push on;

error_log /var/log/nginx/error.log;


# pid        logs/nginx.pid;

events {}

rtmp {
    server {
         access_log /var/log/nginx/access.log;

        listen 1935;
        application live {
            live on;
            hls on;
            exec_publish bash -c "/home/octopus/octopus-rtmp.sh publish_started $args $pageurl $name";
            exec_publish_done bash -c "/home/octopus/octopus-rtmp.sh publish_done $args $pageurl $name";
            hls_path /tmp/hls;
            hls_fragment 2s;
        }

        application stream-and-rec {
            live on;
            hls on;
            exec_publish bash -c "/home/octopus/octopus-rtmp.sh publish_started $args $pageurl $name $arg_uid";
            exec_publish_done bash -c "/home/octopus/octopus-rtmp.sh publish_done $args $pageurl $name $arg_uid";
            exec_record_done bash -c "/home/octopus/octopus-rtmp.sh record_done $args $name $filename";
            record all;
            record_path /tmp/recordings/$name;
            record_suffix -%d-%b-%y-%T.mp4;
            hls_path /tmp/hls-record;
            hls_fragment 2s;
        }

        application encoder{
            live on;
            notify_method get;
            exec ffmpeg -i rtmp://localhost:1935/$app/$name -c:a aac -strict -2 -b:a 256k -c:v libx264 -x264opts bitrate=1024:vbv-maxrate=1024:vbv-bufsize=1024 -rtbufsize 100M -bufsize 1024k -preset veryfast -f flv rtmp://localhost:1935/$app/$name;
        }
    }
}

# HTTP can be used for accessing RTMP stats
http {

    server {

        listen      8080 ssl;
        ssl_certificate    /etc/nginx/ssl/cert.crt;
        ssl_certificate_key /etc/nginx/ssl/cert.key;

        location /hls {
            # Serve HLS fragments
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header 'Access-Control-Allow-Origin' '*' always;
        }

        location /hls-record {
            # Serve HLS fragments
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header 'Access-Control-Allow-Origin' '*' always;
        }

        location /dash {
            # Serve DASH fragments
            root /tmp;
            add_header Cache-Control no-cache;
        }
    }
}